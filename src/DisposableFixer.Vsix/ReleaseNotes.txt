Release 1.5.0
Issue 106: Support for Interlocked.Exchange

Release 1.4.0
Issue 101: Support for Visual Studio 2019. Thanks to xperiandri

Release 1.3.0
Issue 98: CodeFix that adds Dispose Calls for member now works correctly, when there is an inner class with a Dispose method.
Issue 99: XmlTextReader and XmlTextWriter are now recognized as tracking types.
Issue 100: Fields/Properties assigned by await Expression are not evaluated correctly.

Release 1.1.4
Issue 96: Codefix introduce field/property does now work with disposables yielded by await.
Issue 97: Wrap in using CodeFix does now work with disposables yielded by await.
Issue 100: Disposed field/properties that get assigned in an await expression, are not longer marked as not disposed.

Release 1.1.3
Issue 94: If a property or field gets assigned with an IDisposable object, but the member does not implement IDisposable, then within the Dispose method this member is first cast to IDisposable before the Dispose method of this member is called. 
Issue 95: When added interface IDisposable to the currrent class, its added as base interface, not as base class.

Release 1.1.2
* Issue 92: if a property returns an non IDisposable ObjectCreations, the ObjectCreations is no longer marked as not disposed.
* Issue 93: When apply codefix that dispose a variable after last usage, no Exceptions is thrown.

Release 1.1.1
* Issue 89: ThisExpression is now analyzed correctly.
* Issue 90: Analyzer now ckecks if a variable is returned within block, not within method.

Release 1.1.0
* Issue 79: Added CodeFix that disposes local variable after last usage.
* Issue 85: Fixed crash that occured when using lamda as method body.
* Issue 88: Diposed objects assigned via await are not detected correctly.
* Issue 81: Improved issue template.

Release 1.0.1
* Issue 83: Extended Whitelist for type where Close is identical to Dispose
* Issue 86: Undisposed Local variables get tagged with correct message and diagnostic id.

Release 1.0.0
* Issue 76: Anonymous variables that are argument cause no longer exceptions.
* Issue 77: VariableDeclatations introduced by CodeFix now have no travia.
* Issue 78: If BaseClass already implements IDisposable, interface declarations is no longer added to class.

Release 0.40
* Issue 75: anonymous objects and local variables can not be dispsoed via field that get disposed in Dispose method.

Release 0.39
* Issue 74: Assignments of object to properties get marked correctly.
* Issue 21: Anonymous variables and local variables can be wrapped into using.
* Some improvements when disposing fields and properties.
* Added lots of test to verify CodeFixes.

Release 0.38
* Upgrade to latest version of Roslyn. Switch to .Net Standard.

Release 0.37
* Issue 73: Added support for Newtonsoft.Json.JsonTextReader

Release 0.36
* Issue 42: Added CodeFix for undisposed fields and proeprties. NOT TESTED YET.

Release 0.35
* Issue 70: Added support for Dispose methods, that are only valid for certains classes. E.g. SerialPort.Close internally calls Dispose.
* Issue 71: Added support to detect objects disposed via null propagation.

Release 0.34
* Issue 69: DataColumn, DataViewManager, DataSet and DataTable from System.Data now get ignored durign analysis.

Release 0.33
* Issue 38: Added support for ILoggerFactory from Asp.Net Core.
* Issue 63: Added support for IWindsorContainer.Regsiter methods.
* Issue 65: Added support for virtual Dispose pattern: https://docs.microsoft.com/pt-br/dotnet/standard/design-guidelines/dispose-pattern
* Issue 68: Added support for HttpResponse.RegisterForDispose method from Asp.Net Core.

Release 0.32
* Issue 64: Fixed NullReferenceException when using property initializer.
* Issue 66: When using MethodIncocations in Properties that doesn't implement IDisposable, there is no longer a Diagnsotic.

Release 0.31
* Issue 64: Started first investigations and refactored some code.

Release 0.30
* Issue 62: Added support for LumenWorks.Framework.IO.Csv.CsvReader
* issue 61: Return value of System.Diagnostics.Process.GetCurrentProcess() is ignored.
* Issue 60: Ids and titles of diagnostics follows standard of C# compiler.
* Issue 59: Disposables return in Func and Action get ignored.
* Issue 56: Corrected detection for CompositeDisposable.

Release 0.29
* Issue 56: All tracking methods and constructors get detected correcl, now.

Release 0.28 
* Issue 50: A.Fake<IDisposable> is now ignored.
* Issue 55: Added additional places to recognize disposing of fields/properties. Currently Cleanup method and TearDown attribute is supported.

Release 0.27 - Support for properties
* Issue 51: Corrected diagnostics id for undisposed assignments to properties.
* Issue 52: Corrected diagnostics id for undisposed properties with expression body.
* Issue 53: Corrected diagnostics id for undisposed auto properties.
* Issue 54: Properties not get detected correctly.

Release 0.26
* Issue 34 & 49: Added support for extension methods that are tracking calls like AddTo from Reactive.Bindings.Extensions.IDisposableExtensions.

Release 0.25
* Fixed issue 48: Null-conditional operator now correctly detects Dispose calls on MethodInvocations and fields, too.

Release 0.24
* Fixed issue 47: Removed unnecessary dependency to Microsoft.VisualStudio.Shell.12.0

Release 0.23
* Fixed issue 43: Disposable directly returned in Funcs no longer yield an error.
* Fixed issue 44: Disposables that are disposed within Funcs and Actions no longer yield an error.
* Fixed issue 45: Scope of disposable is now determined correctly.

Release 0.22
* Fixed issue 39: If variable/field assignment of IDisposables is splitted, this is now correctly analysed.
* Fixed issue 40: If an disposable is created and disposed in one step (e.g. (new MemoryStream).Dispose()), this is now correctly analysed.

Release 0.21
* Fixed issue 33: Dispose via Null-conditional operator is now recognized correctly.
* Fixed issue 37: await within using statements are now recognized correctly.
* Fixed issue 38: Microsoft.Extensions.Logging.ILoggerFactory is now an ignored interface.

Release 0.20
* Fixed issue 31: If using await on IDisposables, these are now correct recognized.

Release 0.18
* Fixed issue 26: Anonymous objects that are not disposed are not marked as not disposed.
* Fixed issue 30: Support for VS 2017 Community Edition, Professional and Enterprise.

Release 0.17
* Fixed issue 27: Disposables within a using Block are now correctly marked as not disposed.
+ Closed issue 29: Disposing CancellationTokenRegistration should be part of your cleanup.

Release 0.15
* Fixed issue 25: Problem if InvokationExpression called on ObjectCreation returns an IDisposable was fixed.

Release 0.15
* Fixed issue 24: Disposables stored in local variables are no longer marked when returned.

Release 0.14
* Fixed issue 23: Disposables stored in local variables are no longer marked when given to tracking types.

Release 0.13
* Fixed issue 22: All tracking instances from mscorlib are correctly identified, now.

Release 0.12
* Fixed issue 17: ObjectCreations that assign an IDisposable to a field, not get correctly marked as undisposed.
* Fixed issue 18: Defined more descriptive error messages.

Release 0.11
* Fixed issue 14: Task and IEnumerator`1 are now ignored during analysis.

Release 0.10
* Fixed issue 12: InvokationExpression that returned an IDisposable yield a diagnostic.
* Fixed issue 13: If the return value of an InvokationExpression was stored within a local variable, or field or property and got disposed, is yielded a diagnostic.

Release 0.9 
* Fix issue 11: InvokationExpression where SymbolType could not be determined yield an false positive.

Release 0.8
* Fix issue 10: Calls to methods that return IDisposable don't got detected.
* Fix issue 9: Code fix (from template) is no longer offered while pressing Ctrl+.