using System.Collections.Generic;
using System.Linq;
using DisposableFixer.Configuration;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;

namespace DisposableFixer.Extensions
{
<<<<<<< HEAD
    internal static class ClassDeclarationSyntaxExtensions
=======
    public static class ClassDeclarationSyntaxExtensions 
>>>>>>> First version that is able to dispose properties in dispose method.
    {
        public static FieldDeclarationSyntax FindFieldNamed(this ClassDeclarationSyntax classDeclarationSyntax,
            string name)
        {
            return classDeclarationSyntax
                .DescendantNodes()
                .OfType<FieldDeclarationSyntax>()
                .Where(fds =>
                {
                    return fds
                        .DescendantNodes()
                        .OfType<VariableDeclarationSyntax>()
                        .Count(id => id.Variables.Any(v => v.Identifier.Text == name)) == 1;
                })
                .FirstOrDefault();
        }

        public static IEnumerable<MethodDeclarationSyntax> GetDisposingMethods(
            this ClassDeclarationSyntax @class, SyntaxNodeAnalysisContext context,
            IConfiguration configuration)
        {
            var disposeMethods = configuration.DisposingMethods;


            return @class
                .DescendantNodes<MethodDeclarationSyntax>()
                .Where(mds => mds.IsDisposeMethod(configuration, context.SemanticModel));
        } 
    }
}